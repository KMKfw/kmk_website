"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[2559],{3905:function(e,a,n){n.d(a,{Zo:function(){return d},kt:function(){return u}});var o=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,o,t=function(e,a){if(null==e)return{};var n,o,t={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var p=o.createContext({}),m=function(e){var a=o.useContext(p),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},d=function(e){var a=m(e.components);return o.createElement(p.Provider,{value:a},e.children)},l={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},c=o.forwardRef((function(e,a){var n=e.components,t=e.mdxType,r=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=m(n),u=t,k=c["".concat(p,".").concat(u)]||c[u]||l[u]||r;return n?o.createElement(k,s(s({ref:a},d),{},{components:n})):o.createElement(k,s({ref:a},d))}));function u(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var r=n.length,s=new Array(r);s[0]=c;var i={};for(var p in a)hasOwnProperty.call(a,p)&&(i[p]=a[p]);i.originalType=e,i.mdxType="string"==typeof e?e:t,s[1]=i;for(var m=2;m<r;m++)s[m]=n[m];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},861:function(e,a,n){n.r(a),n.d(a,{assets:function(){return d},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return i},metadata:function(){return m},toc:function(){return l}});var o=n(7462),t=n(3366),r=(n(7294),n(3905)),s=["components"],i={},p="Teclas",m={unversionedId:"ptBR/keys",id:"ptBR/keys",title:"Teclas",description:"NOTE: Isto n\xe3o \xe9 uma tabela de busca de objetos fornecidos pelo KMK. Esta",source:"@site/docs/ptBR/keys.md",sourceDirName:"ptBR",slug:"/ptBR/keys",permalink:"/docs/ptBR/keys",draft:!1,editUrl:"https://github.com/KMKfw/kmk_firmware/tree/master/docs/ptBR/keys.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Vis\xe3o Geral das Teclas",permalink:"/docs/ptBR/keycodes"},next:{title:"kmkpython_vs_circuitpython",permalink:"/docs/ptBR/kmkpython_vs_circuitpython"}},d={},l=[],c={toc:l};function u(e){var a=e.components,n=(0,t.Z)(e,s);return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"teclas"},"Teclas"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"NOTE: Isto n\xe3o \xe9 uma tabela de busca de objetos fornecidos pelo KMK. Esta\nlistagem pode ser encontrada em ",(0,r.kt)("inlineCode",{parentName:"p"},"keycodes.md"),". Possivelmente vale a pena\nobservar o c\xf3digo-fonte bruto se voc\xea estiver travado: ",(0,r.kt)("inlineCode",{parentName:"p"},"kmk/keys.py"),".")),(0,r.kt)("p",null,"Este \xe9 um montante de documenta\xe7\xe3o sobre como teclas f\xedsicas s\xe3o mapeada para\neventos (e o ciclo-de-vida destes eventos) no KMK. \xc9 um tanto t\xe9cnico, mas se\nvoc\xea cogita estender a funcionalidade so seu teclado com c\xf3digo extra, voc\xea\nprecisar\xe1 de pelo menos uma fra\xe7\xe3o deste conhecimento t\xe9cnico."),(0,r.kt)("p",null,"Os primeiros passos neste processo n\xe3o s\xe3o t\xe3o interessantes para a maior parte\ndos fluxos de trabalho, raz\xe3o pela qual eles est\xe3o t\xe3o soterrados no KMK:\nvarremos um monte de faixas de GPIO (o qu\xe3o r\xe1pido o CircuitPython nos permitir)\npara ver onde, numa matriz de teclas, uma delas foi pressionada. Os detalhes\nt\xe9cnicos deste processo est\xe3o melhor descritos na\n",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Keyboard_matrix_circuit"},"Wikipedia"),". Ent\xe3o,\nvarremos o mapa de teclas definido, encontrando a primeira tecla v\xe1lida neste\n\xedndice baseado na pilha de camadas ativas (esta l\xf3gica, se voc\xea quer ler o\nc\xf3digo, est\xe1 em ",(0,r.kt)("inlineCode",{parentName:"p"},"kmk/internal_state.py"),", m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"_find_key_in_map"),")."),(0,r.kt)("p",null,"Os pr\xf3ximos passos s\xe3o a parte interessante, mas para compreend\xea-los precisamos\nentender um pouco do objeto ",(0,r.kt)("inlineCode",{parentName:"p"},"Key")," (encontrado em ",(0,r.kt)("inlineCode",{parentName:"p"},"kmk/keys.py"),"). Objetos ",(0,r.kt)("inlineCode",{parentName:"p"},"Key"),"\nt\xeam algumas pe\xe7as fundamentais de informa\xe7\xe3o:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"O ",(0,r.kt)("inlineCode",{parentName:"p"},"code"),", que pode ser qualquer inteiro. Inteiros menores que\n",(0,r.kt)("inlineCode",{parentName:"p"},"FIRST_KMK_INTERNAL_KEY")," s\xe3o enviados pela pilha de HID (e portanto para o\ncomputador, que traduzir\xe1 aquele inteiro para algo \xfatil - por exemplo,\n",(0,r.kt)("inlineCode",{parentName:"p"},"code=4")," torna-se ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," em um teclado US QWERTY/Dvorak)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Os modificadores anexados (para implementar coisas como Shift ou ",(0,r.kt)("inlineCode",{parentName:"p"},"KC.HYPR")," que\ns\xe3o pressionamentos de teclas singulares enviadas juntamente a mais de uma\ntecla em um \xfanico reporte HID. Este \xe9 um conceito diferente de Sequ\xeancias, que\ns\xe3o uma caracter\xedstica do KMK documentada em ",(0,r.kt)("inlineCode",{parentName:"p"},"sequences.md"),"). Para todos os\nprop\xf3sitos fora do n\xfacleo do KMK, este campo deve ser ignorado - ele pode ser\nseguramente populado mediante meios bem mais s\xe3os que perder tempo fazendo\nisso na m\xe3o.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Alguns dados sobre se a tecla deveria ter sido pressionada ou liberada - isto\n\xe9 majoritariamente um detalhe de implementa\xe7\xe3o sobre como Sequ\xeancias\nfuncionam, onde, por exemplo, ",(0,r.kt)("inlineCode",{parentName:"p"},"KC.RALT")," pode precisar ser segurada por toda a\ndura\xe7\xe3o da sequ\xeancia, em vez de ser liberada imediatamente antes de mover para\no pr\xf3ximo catactere. Geralmente usu\xe1rios finais n\xe3o precisam se preocupar com\nisso, mas os campos s\xe3o denominados ",(0,r.kt)("inlineCode",{parentName:"p"},"no_press")," e ",(0,r.kt)("inlineCode",{parentName:"p"},"no_release")," e s\xe3o\nreferenciados em alguns lugares da base de c\xf3digo se voc\xea precisar de\nexemplos.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Manipuladores (",(0,r.kt)("em",{parentName:"p"},"handler"),') para o pressionamento (algumas vezes chamado de\n"keydown" ou "press") e libera\xe7\xe3o (algumas vezes chamado de "keyup" ou\n"release"). KMK fornece manipuladores para fun\xe7\xf5es padr\xe3o do yteclado e\nalgumas teclas especiais de sobrescrita (como ',(0,r.kt)("inlineCode",{parentName:"p"},"KC.GESC"),", que \xe9 uma forma\naprimorada de teclas ANSI j\xe1 existentes) em ",(0,r.kt)("inlineCode",{parentName:"p"},"kmk/handlers/stock.py"),", para\ntroca de camadas em ",(0,r.kt)("inlineCode",{parentName:"p"},"kmk/handlers.layers.py"),", e para tudo relacionado a\nsequ\xeancias (veja de novo ",(0,r.kt)("inlineCode",{parentName:"p"},"sequences.md"),") em\n",(0,r.kt)("inlineCode",{parentName:"p"},"kmk/handlers/sequences.py"),". Discutiremos mais estes em breve.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Chamadas de retorno (",(0,r.kt)("em",{parentName:"p"},"callback"),") opcionais a serem executadas antes e/ou\ndepois dos handlers acima. Mais sobre isso em breve.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Um campo ",(0,r.kt)("inlineCode",{parentName:"p"},"meta"),' gen\xe9rico, que \xe9 mais comumente utilizado para teclas "com\nargumentos" - objetos no objeto ',(0,r.kt)("inlineCode",{parentName:"p"},"KC")," que na realidade s\xe3o fun\xe7\xf5es que retornam\ninst\xe2ncias de ",(0,r.kt)("inlineCode",{parentName:"p"},"Key"),', que geralmente precisam acessar os argumentos passados\npara a "fun\xe7\xe3o mais externa". Muitos destes exemplos s\xe3o relacionados com\ntrocas de camadas - por exemplo, ',(0,r.kt)("inlineCode",{parentName:"p"},"KC.MO")," \xe9 implementada como uma tecla com\nargumentos - quando o usu\xe1rio acrescenta ",(0,r.kt)("inlineCode",{parentName:"p"},"KC.MO(1)")," ao teclado, a chamada de\nfun\xe7\xe3o retorna um objeto ",(0,r.kt)("inlineCode",{parentName:"p"},"Key")," com ",(0,r.kt)("inlineCode",{parentName:"p"},"meta")," contendo um objeto contendo as\npropriedades ",(0,r.kt)("inlineCode",{parentName:"p"},"layer")," e ",(0,r.kt)("inlineCode",{parentName:"p"},"kc"),". Existem outros usos para o campo ",(0,r.kt)("inlineCode",{parentName:"p"},"meta"),", e\nexemplos podem ser encontrados em ",(0,r.kt)("inlineCode",{parentName:"p"},"kmk/types.py"),"."))),(0,r.kt)("p",null,"Objetos ",(0,r.kt)("inlineCode",{parentName:"p"},"Key")," tamb\xe9m podem ser encadeados chamando eles! Para criar uma tecla\nque segura Ctrl e Shift simultaneamente, simplesmente fazemos:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"CTRLSHFT = KC.LCTL(KC.LSFT)\n\nkeyboard.keymap = [ ... CTRLSHFT ... ]\n")),(0,r.kt)("p",null,"Quando uma tecla \xe9 pressionada e tiramos um objeto ",(0,r.kt)("inlineCode",{parentName:"p"},"Key")," do keymap, acontecer\xe1 o\nseguinte:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Callbacks pr\xe9-pressionamento ser\xe3o executados na ordem em que foram\natribu\xeddos, com seus valores de retorno descartados (a n\xe3o ser que o usu\xe1rio\nos anexe, eles quase nunca existem)."),(0,r.kt)("li",{parentName:"ul"},"O handler de pressionamento correspondente ser\xe1 executado (mais comumente este\n\xe9 fornecido pelo KMK)."),(0,r.kt)("li",{parentName:"ul"},"Calllbacks p\xf3s-pressionamento ser\xe3o executados na ordem em que foram\natribu\xeddos, com seus valores de retorno descartados (a n\xe3o ser que o usu\xe1rio\nos anexe, eles quase nunca existem).")),(0,r.kt)("p",null,"Os mesmos passos s\xe3o executados quando uma tecla \xe9 liberada."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"OK, ent\xe3o... Mas o que \xe9 um handler, e o que s\xe3o esses callbacks?!")),(0,r.kt)("p",null,"Grosso modo, todos eles servem a um mesmo prop\xf3siti: fazer algo com os dados da\ntecla, ou executar efeitos colaterais. A maioria dos handlers s\xe3o fornecidos\npelo KMK internamente e modificam o ",(0,r.kt)("inlineCode",{parentName:"p"},"InternalState")," de alguma forma -\nadicionando a tecla \xe0 fila HID, modificando camadas, etc. Os handlers\npr\xe9/p\xf3s-pressionamento s\xe3o projetados para permitir que a funcionalidade seja\nembutida nestes pontos no fluxo de eventos sem ter que reimplementar (ou\nimportar e chamar internamente) os handlers internos."),(0,r.kt)("p",null,"Todos esses m\xe9todos recebem os mesmos argumentos, e por isso eu vou copiar a\ndocstring direto do c\xf3digo-fonte:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Recebe o seguinte:"),(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"self (Esta inst\xe2ncia Key)"),(0,r.kt)("li",{parentName:"ul"},"state (InternalState corrente)"),(0,r.kt)("li",{parentName:"ul"},"KC (A tabela de busca KC, para conveni\xeancia)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"coord_int")," (Um inteiro, representa\xe7\xe3o interna da coordenada da matriz para\na tecla pressionada - costumeiramente isto n\xe3o \xe9 \xfatil para usu\xe1rios finais,\nmas \xe9 fornecida por consist\xeancia com os manipuladores internos)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"coord_raw")," (Uma tupla X,Y de coordenadas da matrix - costumeiramente n\xe3o \xe9\n\xfatil, tamb\xe9m)")),(0,r.kt)("p",{parentName:"blockquote"},"O valor de retorno do callback fornecido \xe9 descartado. ",(0,r.kt)("em",{parentName:"p"},"Exce\xe7\xf5es n\xe3o s\xe3o\ncapturadas"),", e provavelmente quebrar\xe3o o KMK se n\xe3o forem tratadas dentro da\ntua fun\xe7\xe3o."),(0,r.kt)("p",{parentName:"blockquote"},"Estes handlers s\xe3o executados na ordem de anexa\xe7\xe3o: handlers fornecidos por\nchamadas anteriores deste m\xe9todo s\xe3o executados antes daqueles fornecidos por\nchamadas posteriores.")),(0,r.kt)("p",null,"Isto significa que se voc\xea quer adicionar coisas como suporte a LED/brilho, ou\num bot\xe3o que aciona seu modem GSM para falar com algu\xe9m, ou seja l\xe1 o que voc\xea\npuder fazer em CircuitPython, que tamb\xe9m retenha as capacidades de troca de\ncamadas ou seja l\xe1 qual for o handler de suporte, voc\xea est\xe1 coberto. Isto tamb\xe9m\nsignifica que voc\xea pode adicionar funcionalidades completamente novas ao KMK\nescrevendo seu pr\xf3prio handler."),(0,r.kt)("p",null,"Eis um exemplo de gancho de ciclo de vida (",(0,r.kt)("em",{parentName:"p"},"lifecycle hook"),") que imprime um\nShrek gigante em Arte ASCII. Ele n\xe3o utiliza os argumentos que recebe, porque\nn\xe3o tem inten\xe7\xe3o de modificar o estado interno. Ele \xe9 puramente um efeito\ncolateral (",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Side_effect_(computer_science)"},"side\neffect"),") executado\nsempre que se pressiona o Alt esquerdo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def shrek(*args, **kwargs):\n    print('\u2880\u2874\u2811\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28c0\u28e4\u28e4\u28e4\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800')\n    print('\u2838\u2847\u2800\u283f\u2840\u2800\u2800\u2800\u28c0\u2874\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800')\n    print('\u2800\u2800\u2800\u2800\u2811\u2884\u28e0\u283e\u2801\u28c0\u28c4\u2848\u2819\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800')\n    print('\u2800\u2800\u2800\u2800\u2880\u2840\u2801\u2800\u2800\u2808\u2819\u281b\u2802\u2808\u28ff\u28ff\u28ff\u28ff\u28ff\u283f\u287f\u28bf\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u2800')\n    print('\u2800\u2800\u2800\u2880\u287e\u28c1\u28c0\u2800\u2834\u2802\u2819\u28d7\u2840\u2800\u28bb\u28ff\u28ff\u282d\u28a4\u28f4\u28e6\u28e4\u28f9\u2800\u2800\u2800\u2880\u28b4\u28f6\u28c6')\n    print('\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28f7\u28ee\u28fd\u28fe\u28ff\u28e5\u28f4\u28ff\u28ff\u287f\u2882\u2814\u289a\u287f\u28bf\u28ff\u28e6\u28f4\u28fe\u2801\u2838\u28fc\u287f')\n    print('\u2800\u2880\u285e\u2801\u2819\u283b\u283f\u281f\u2809\u2800\u281b\u28b9\u28ff\u28ff\u28ff\u28ff\u28ff\u28cc\u28a4\u28fc\u28ff\u28fe\u28ff\u285f\u2809\u2800\u2800\u2800\u2800\u2800')\n    print('\u2800\u28fe\u28f7\u28f6\u2807\u2800\u2800\u28e4\u28c4\u28c0\u2840\u2808\u283b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u2800')\n    print('\u2800\u2809\u2808\u2809\u2800\u2800\u28a6\u2848\u28bb\u28ff\u28ff\u28ff\u28f6\u28f6\u28f6\u28f6\u28e4\u28fd\u2879\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u2800')\n    print('\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2832\u28fd\u287b\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28dc\u28ff\u28ff\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u2800')\n    print('\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28f7\u28f6\u28ee\u28ed\u28fd\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800')\n    print('\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28c0\u28c8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2807\u2800\u2800\u2800\u2800\u2800\u2800\u2800')\n    print('\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800')\n    print('\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2839\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u281f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800')\n    print('\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u281b\u283b\u283f\u283f\u283f\u283f\u281b\u2809')\n\n\nKC.LALT.before_press_handler(shrek)\n")),(0,r.kt)("p",null,"Voc\xea tamb\xe9m pode copiar uma tecla sem quaisquer handlers pr\xe9 ou p\xf3s nela\nmediante ",(0,r.kt)("inlineCode",{parentName:"p"},".clone()"),", tal que por exemplo, se eu j\xe1 adicionei Shrek ao meu ",(0,r.kt)("inlineCode",{parentName:"p"},"LALT"),"\nmas quero um ",(0,r.kt)("inlineCode",{parentName:"p"},"LALT")," sem Shrek em algum lugar do keymap, eu posso simplesmente\nclonar a tecla, e a nova tecla n\xe3o ter\xe1 meus handlers atrelados a ela:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"SHREKLESS_ALT = KC.LALT.clone()\n")))}u.isMDXComponent=!0}}]);