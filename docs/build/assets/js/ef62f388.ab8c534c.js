"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[8078],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),k=r,m=d["".concat(i,".").concat(k)]||d[k]||p[k]||o;return n?a.createElement(m,s(s({ref:t},u),{},{components:n})):a.createElement(m,s({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=k;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[d]="string"==typeof e?e:r,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},6011:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},s="Lock Status",l={unversionedId:"en/lock_status",id:"en/lock_status",title:"Lock Status",description:"This extension exposes host-side locks like caps or num lock.",source:"@site/docs/en/lock_status.md",sourceDirName:"en",slug:"/en/lock_status",permalink:"/docs/en/lock_status",draft:!1,editUrl:"https://github.com/KMKfw/kmk_firmware/tree/master/docs/en/lock_status.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"LED (Mono color backlight)",permalink:"/docs/en/led"},next:{title:"Media Keys",permalink:"/docs/en/media_keys"}},i={},c=[{value:"Enabling the extension",id:"enabling-the-extension",level:2},{value:"Read Lock Status",id:"read-lock-status",level:2},{value:"React to Lock Status Changes",id:"react-to-lock-status-changes",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lock-status"},"Lock Status"),(0,r.kt)("p",null,"This extension exposes host-side locks like caps or num lock."),(0,r.kt)("h2",{id:"enabling-the-extension"},"Enabling the extension"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from kmk.extensions.lock_status import LockStatus\n\nlocks = LockStatus()\nkeyboard.extensions.append(locks)\n\n")),(0,r.kt)("h2",{id:"read-lock-status"},"Read Lock Status"),(0,r.kt)("p",null,"Lock states can be retrieved with getter methods and are truth valued -- ",(0,r.kt)("inlineCode",{parentName:"p"},"True"),"\nwhen the lock is enabled and ",(0,r.kt)("inlineCode",{parentName:"p"},"False")," otherwise."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"locks.get_num_lock() ")),(0,r.kt)("td",{parentName:"tr",align:null},"Num Lock")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"locks.get_caps_lock() ")),(0,r.kt)("td",{parentName:"tr",align:null},"Caps Lock")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"locks.get_scroll_lock() ")),(0,r.kt)("td",{parentName:"tr",align:null},"Scroll Lock")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"locks.get_compose() ")),(0,r.kt)("td",{parentName:"tr",align:null},"Compose")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"locks.get_kana() ")),(0,r.kt)("td",{parentName:"tr",align:null},"Kana")))),(0,r.kt)("h2",{id:"react-to-lock-status-changes"},"React to Lock Status Changes"),(0,r.kt)("p",null,"The best way to react to changes in lock status is to extend\nthe LockStatus class. When a lock status change happens,\nthe 'after_hid_send' function is envoked so you would override\nLockStatus's to inject your own logic. Be aware though that\nthis function is also critically important to the functionality\nof LockStatus so be sure to invoke the 'super()' version of your\nclass to trigger the default functionality of LockStatus."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# in your main.py\nfrom kb import KMKKeyboard\nfrom kmk.extensions.lock_status import LockStatus\nfrom kmk.extensions.LED import LED\n\nkeyboard = KMKKeyboard()\nleds = LED(led_pin=[board.GP27, board.GP28])\n\nclass LEDLockStatus(LockStatus):\n    def set_lock_leds(self):\n        if self.get_caps_lock():\n            leds.set_brightness(50, leds=[0])\n        else:\n            leds.set_brightness(0, leds=[0])\n\n        if self.get_scroll_lock():\n            leds.set_brightness(50, leds=[1])\n        else:\n            leds.set_brightness(0, leds=[1])\n\n    def after_hid_send(self, sandbox):\n        super().after_hid_send(sandbox)  # Critically important. Do not forget\n        if self.report_updated:\n            self.set_lock_leds()\n\nkeyboard.extensions.append(leds)\nkeyboard.extensions.append(LEDLockStatus())\n")))}p.isMDXComponent=!0}}]);