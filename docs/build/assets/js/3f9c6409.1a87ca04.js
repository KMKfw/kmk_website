"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[8534],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>b});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=i,b=p["".concat(s,".").concat(m)]||p[m]||c[m]||a;return n?o.createElement(b,r(r({ref:t},u),{},{components:n})):o.createElement(b,r({ref:t},u))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:i,r[1]=l;for(var d=2;d<a;d++)r[d]=n[d];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9509:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var o=n(7462),i=(n(7294),n(3905));const a={},r="boot.py",l={unversionedId:"en/boot",id:"en/boot",title:"boot.py",description:"boot.py lives in the root of your keyboard when mounted as a storage device.",source:"@site/docs/en/boot.md",sourceDirName:"en",slug:"/en/boot",permalink:"/docs/en/boot",draft:!1,editUrl:"https://github.com/KMKfw/kmk_firmware/tree/master/docs/en/boot.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BLE HID",permalink:"/docs/en/ble_hid"},next:{title:"CapsWord",permalink:"/docs/en/capsword"}},s={},d=[{value:"KMKs builtin boot configurator",id:"kmks-builtin-boot-configurator",level:2},{value:"Signature",id:"signature",level:3},{value:"Sense",id:"sense",level:4},{value:"Source",id:"source",level:4},{value:"boot_device",id:"boot_device",level:4},{value:"cdc",id:"cdc",level:4},{value:"consumer_control",id:"consumer_control",level:4},{value:"keyboard",id:"keyboard",level:4},{value:"midi",id:"midi",level:4},{value:"mouse",id:"mouse",level:4},{value:"nkro",id:"nkro",level:4},{value:"pan",id:"pan",level:4},{value:"storage",id:"storage",level:4},{value:"usb_id",id:"usb_id",level:4},{value:"return value",id:"return-value",level:4},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Example 3",id:"example-3",level:3}],u={toc:d},p="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"bootpy"},"boot.py"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"boot.py")," lives in the root of your keyboard when mounted as a storage device.\nThere is a more detailed explanation in the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.circuitpython.org/en/latest/README.html"},"circuit python docs"),",\nhowever there are some common use cases for your keyboard listed here."),(0,i.kt)("h2",{id:"kmks-builtin-boot-configurator"},"KMKs builtin boot configurator"),(0,i.kt)("p",null,"KMK ships with a handy boot configuration function that does all the hard work\nfor you.\nThe interface may change in the future, but there is a safety mechanism in\nplace: if anything goes wrong, it'll boot into a mountable and debuggable\nconfiguration."),(0,i.kt)("h3",{id:"signature"},"Signature"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from kmk.bootcfg import bootcfg\n\nbootcfg(\n    # required:\n    sense: [microcontroller.Pin, digitalio.DigitalInOut],\n    # optional:\n    source: Optional[microcontroller.Pin, digitalio.DigitalInOut] = None,\n    boot_device: int = 0,\n    cdc: bool = True,\n    consumer_control: bool = True,\n    keyboard: bool = True,\n    midi: bool = True,\n    mouse: bool = True,\n    nkro: bool = False,\n    pan: bool = False,\n    storage: bool = True,\n    usb_id: Optional[tuple[str, str]] = None,\n    **kwargs,\n) -> bool\n")),(0,i.kt)("p",null,"All optional parameters are set to reflect common Circuipython defaults, however\nthey may differ from board specific defaults."),(0,i.kt)("h4",{id:"sense"},"Sense"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"sense")," accepts either uninitialized ",(0,i.kt)("inlineCode",{parentName:"p"},"Pin"),"s or ",(0,i.kt)("inlineCode",{parentName:"p"},"DigitalInOut")," instances for\nmaximum flexibility.\nThe boot configuration is only applied if ",(0,i.kt)("inlineCode",{parentName:"p"},"sense")," reads ",(0,i.kt)("inlineCode",{parentName:"p"},"True"),' or "high", and\nskipped if it reads ',(0,i.kt)("inlineCode",{parentName:"p"},"False"),' or "low".\nIf ',(0,i.kt)("inlineCode",{parentName:"p"},"sense")," is an uninitialized ",(0,i.kt)("inlineCode",{parentName:"p"},"Pin"),", it'll be configured as pulled-up input; it\nwont be further configured if it is a ",(0,i.kt)("inlineCode",{parentName:"p"},"DigitalInOut"),"."),(0,i.kt)("h4",{id:"source"},"Source"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"source")," accepts either uninitialized ",(0,i.kt)("inlineCode",{parentName:"p"},"Pin"),"s or ",(0,i.kt)("inlineCode",{parentName:"p"},"DigitalInOut"),' instances for\nmaximum flexibility.\nIt\'s the "source" of the test voltage to be read by the sense pin.\nIf ',(0,i.kt)("inlineCode",{parentName:"p"},"source")," is an uninitialized ",(0,i.kt)("inlineCode",{parentName:"p"},"Pin"),', it\'ll be configured as a "low" output; it\nwont be further configured if it is a ',(0,i.kt)("inlineCode",{parentName:"p"},"DigitalInOut"),"."),(0,i.kt)("p",null,"Common matrix and direct pin configurations (see also the examples below):"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"diode_orientation"),(0,i.kt)("th",{parentName:"tr",align:null},"sense pin"),(0,i.kt)("th",{parentName:"tr",align:null},"source pin"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"COL2ROW")),(0,i.kt)("td",{parentName:"tr",align:null},"column"),(0,i.kt)("td",{parentName:"tr",align:null},"row")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ROW2COL")),(0,i.kt)("td",{parentName:"tr",align:null},"row"),(0,i.kt)("td",{parentName:"tr",align:null},"column")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"direct pin"),(0,i.kt)("td",{parentName:"tr",align:null},"direct pin"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"None"))))),(0,i.kt)("h4",{id:"boot_device"},"boot_device"),(0,i.kt)("p",null,"Boot HID device configuration for ",(0,i.kt)("inlineCode",{parentName:"p"},"usb_hid"),", see the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.circuitpython.org/en/latest/shared-bindings/usb_hid/index.html#usb_hid.enable"},"usb_hid documentation"),"\nfor details."),(0,i.kt)("h4",{id:"cdc"},"cdc"),(0,i.kt)("p",null,"This will enable or disable the usb endpoint for the serial console with REPL."),(0,i.kt)("h4",{id:"consumer_control"},"consumer_control"),(0,i.kt)("p",null,"Enable the HID endpoint for consumer control reports. Those are extra keys for\nthings like multimedia control and browser shortcuts."),(0,i.kt)("h4",{id:"keyboard"},"keyboard"),(0,i.kt)("p",null,"Enable the keyboard HID endpoint. Why would you disable that? For a split half\nthat isn't connected to USB and needs extra memory for a massive display maybe?"),(0,i.kt)("h4",{id:"midi"},"midi"),(0,i.kt)("p",null,"It's MIDI over USB. Enabled by default in Circuitpython, but most keyboards don't use it."),(0,i.kt)("h4",{id:"mouse"},"mouse"),(0,i.kt)("p",null,"Enable the HID endpoint for a pointing device. A pointing device, or mouse, is\nlike a keyboard, but with continous instead of binary keys... which also go\nsideways."),(0,i.kt)("h4",{id:"nkro"},"nkro"),(0,i.kt)("p",null,"Enable n-key rollover support. If the default keyboard is enabled, this option\nwill replace the standard 6-key rollover endpoint with an n-key rollover one.\nThis is technically not a standard HID endpoint, but if you want this, you\nprobably know what you're doing."),(0,i.kt)("h4",{id:"pan"},"pan"),(0,i.kt)("p",null,"Enable panning, aka horizontal scrolling, for the pointing device, aka mouse,\nhid endpoint."),(0,i.kt)("h4",{id:"storage"},"storage"),(0,i.kt)("p",null,"Disable storage if you don't want your computer to go \"there's a new thumb drive\nI have to mount!\" everytime you plug in your keyboard."),(0,i.kt)("h4",{id:"usb_id"},"usb_id"),(0,i.kt)("p",null,'A recent addition to Circuitpython 8 is the ability to give your keyboard an\nidentity other than "MCU board manufacturer" - "Circuitpython device".'),(0,i.kt)("h4",{id:"return-value"},"return value"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"bootcfg")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if boot configuration applied successfully and ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"\nif it was skipped, in case you want to use the sense pin mechanism for other\ncustom boot configurations.\nAny ",(0,i.kt)("em",{parentName:"p"},"unexpected")," errors are intentionally not handled, in order to be recorded\nto the ",(0,i.kt)("inlineCode",{parentName:"p"},"boot_out.txt")," file for easier debugging."),(0,i.kt)("h3",{id:"example-1"},"Example 1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"diode direction from columns to rows,"),(0,i.kt)("li",{parentName:"ul"},"disabled storage"),(0,i.kt)("li",{parentName:"ul"},"disabled midi"),(0,i.kt)("li",{parentName:"ul"},"disabled mouse"),(0,i.kt)("li",{parentName:"ul"},"custom vendor and device names")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import board\n\nfrom kmk.bootcfg import bootcfg\n\nbootcfg(\n    sense=board.GP0,  # column\n    source=board.GP8, # row\n    midi=False,\n    mouse=False,\n    storage=False,\n    usb_id=('KMK Keyboards', 'Custom 60% Ergo'),\n)\n\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Tip"),": for a diode direction from rows to columns, switch row and column gpios\nwhen assigning them to sense and source."),(0,i.kt)("h3",{id:"example-2"},"Example 2"),(0,i.kt)("p",null,"Dedicated switch to disable boot configuration, connected to ground:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import board\n\nfrom kmk.bootcfg import bootcfg\n\nbootcfg(sense=board.GP22, ...)\n")),(0,i.kt)("h3",{id:"example-3"},"Example 3"),(0,i.kt)("p",null,"Shut-in mode:\n",(0,i.kt)("strong",{parentName:"p"},"Always")," apply boot configuration and disable any contact to the outside\nworld.\n",(0,i.kt)("strong",{parentName:"p"},"Caution"),": this an example for a ",(0,i.kt)("inlineCode",{parentName:"p"},"DigitalInOut")," sense pin, and probably an\nunwise thing to do in actuality."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import board\nimport digitalio\n\nfrom kmk.bootcfg import bootcfg\n\nsense = digitalio.DigitalInOut(board.GP42)\nsense.direction = digitalio.Direction.OUTPUT\nsense = True\n\nbootcfg(\n    sense=sense,\n    cdc=False,\n    consumer_control=False,\n    keyboard=False,\n    midi=False,\n    mouse=False,\n    storage=False,\n)\n")),(0,i.kt)("p",null,"We generally advise against importing your keyboard definition and using\nrows/columns to define sense and source pins, because that essentially loads\nthe firmware twice, almost doubling boot times."))}c.isMDXComponent=!0}}]);