"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[1921],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=c;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:i,l[1]=a;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8334:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return a},metadata:function(){return p},toc:function(){return d}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),l=["components"],a={},s="Split Keyboards",p={unversionedId:"split_keyboards",id:"split_keyboards",title:"Split Keyboards",description:"Split keyboards are mostly the same as unsplit. Wired UART is fully supported,",source:"@site/docs/split_keyboards.md",sourceDirName:".",slug:"/split_keyboards",permalink:"/kmk_website/docs/split_keyboards",draft:!1,editUrl:"https://github.com/KMKfw/kmk_firmware/tree/master/docs/split_keyboards.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Sequences",permalink:"/kmk_website/docs/sequences"},next:{title:"Sticky Mod",permalink:"/kmk_website/docs/sticky_mod"}},u={},d=[{value:"Wired UART",id:"wired-uart",level:2},{value:"Bluetooth split (aka no TRRS) Currently in testing",id:"bluetooth-split-aka-no-trrs-currently-in-testing",level:2},{value:"Config",id:"config",level:3},{value:"EE HANDS",id:"ee-hands",level:3},{value:"RP2040 PIO implementation",id:"rp2040-pio-implementation",level:3}],c={toc:d};function m(e){var t=e.components,n=(0,i.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"split-keyboards"},"Split Keyboards"),(0,o.kt)("p",null,"Split keyboards are mostly the same as unsplit. Wired UART is fully supported,\nand testing of Bluetooth splits, though we don't currently offer support for this."),(0,o.kt)("p",null,"Notice that this Split module must be added after the ModTap module to the keyboard.modules."),(0,o.kt)("h2",{id:"wired-uart"},"Wired UART"),(0,o.kt)("p",null,"Wired connections can use UART over 1 or 2 wires. With 2 wires, you will be able\nto synchronize the halves allowing additional features in some extensions."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from kb import data_pin\n:from kmk.modules.split import Split, SplitType\n\nsplit = Split(split_side=SplitSide.LEFT)\nkeyboard.modules.append(split)\n")),(0,o.kt)("h2",{id:"bluetooth-split-aka-no-trrs-currently-in-testing"},"Bluetooth split (aka no TRRS) ","[Currently in testing]"),(0,o.kt)("p",null,"Wireless splits are fully featured with 2 way communication allowing all extensions to work 100%."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from kb import data_pin\nfrom kmk.modules.split import Split, SplitType, Split_Side\n\n\nsplit = Split(split_type=Split.BLE, split_side=SplitSide.LEFT)\nOR\nsplit = Split(split_type=Split.BLE, split_side=SplitSide.LEFT)\nkeyboard.modules.append(split)\n")),(0,o.kt)("h3",{id:"config"},"Config"),(0,o.kt)("p",null,"Useful config options:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"split = Split(\n    split_flip=True,  # If both halves are the same, but flipped, set this True\n    split_side=None,  # Sets if this is to SplitSide.LEFT or SplitSide.RIGHT, or use EE hands\n    split_type=SplitType.UART,  # Defaults to UART\n    split_target_left=True,  # If you want the right to be the target, change this to false\n    uart_interval=20,  # Sets the uarts delay. Lower numbers draw more power\n    data_pin=None,  # The primary data pin to talk to the secondary device with\n    data_pin2=None,  # Second uart pin to allow 2 way communication\n    target_left=True,  # Assumes that left will be the one on USB. Set to folse if it will be the right\n    uart_flip=True,  # Reverses the RX and TX pins if both are provided\n    use_pio=False,  # Use RP2040 PIO implementation of UART. Required if you want to use other pins than RX/TX\n)\n\n")),(0,o.kt)("h3",{id:"ee-hands"},"EE HANDS"),(0,o.kt)("p",null,"If you want to plug USB in on either side, or are using Bluetooth, this is for\nyou."),(0,o.kt)("p",null,"Rename your CIRCUITPY drive to something different. The left side must\nend in L, the right must is in R. The name must be 11 characters or less! This is\na limitation of the filesystem. You will receive an error if you choose a name\nlonger than 11 characters. Instructions on how to do that are\n",(0,o.kt)("a",{parentName:"p",href:"https://learn.adafruit.com/welcome-to-circuitpython/the-circuitpy-drive"},"here"),".\nFor example on NYQUISTL for left and NYQUISTR for the right. "),(0,o.kt)("p",null,"For wired connections you don't need to pass anything. For Bluetooth, remove the ",(0,o.kt)("inlineCode",{parentName:"p"},"split_side")," like this"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Wired\nsplit = Split()\n# Wireless\nsplit = Split(split_type=Split.BLE)\n")),(0,o.kt)("h3",{id:"rp2040-pio-implementation"},"RP2040 PIO implementation"),(0,o.kt)("p",null,"If you're using RP2040 based board and want to use other pins that the one with hardware support of RX/TX, you can try\nusing PIO implementation of two-way wire protocol. Typical use cases for it are premade boards, made with QMK's\nbitbanging protocols in mind."),(0,o.kt)("p",null,"In order to enable it, you must:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"install Circuit Python in 7.2+ version"),(0,o.kt)("li",{parentName:"ul"},"add ",(0,o.kt)("inlineCode",{parentName:"li"},"adafruit_pioasm.mpy")," library to lib or root folder of a board"),(0,o.kt)("li",{parentName:"ul"},"pass ",(0,o.kt)("inlineCode",{parentName:"li"},"use_pio=True")," into ",(0,o.kt)("inlineCode",{parentName:"li"},"Split()")," constructor")))}m.isMDXComponent=!0}}]);