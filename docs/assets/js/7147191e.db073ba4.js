"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[9180],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),y=d(a),m=r,c=y["".concat(s,".").concat(m)]||y[m]||u[m]||l;return a?n.createElement(c,o(o({ref:t},p),{},{components:a})):n.createElement(c,o({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=y;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var d=2;d<l;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}y.displayName="MDXCreateElement"},5300:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return u}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),o=["components"],i={},s="Layers",d={unversionedId:"layers",id:"layers",title:"Layers",description:"Layers module adds keys for accessing other layers. It can simply be added to",source:"@site/docs/layers.md",sourceDirName:".",slug:"/layers",permalink:"/docs/layers",draft:!1,editUrl:"https://github.com/KMKfw/kmk_firmware/tree/master/docs/layers.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"THIS IS OUT OF DATE. DO NOT USE. ONLY FOR REFERENCE",permalink:"/docs/kmkpython_vs_circuitpython"},next:{title:"LED (Mono color backlight)",permalink:"/docs/led"}},p={},u=[{value:"Keycodes",id:"keycodes",level:2},{value:"Custom HoldTap Behavior",id:"custom-holdtap-behavior",level:2},{value:"Working with Layers",id:"working-with-layers",level:2},{value:"Using Multiple Base Layers",id:"using-multiple-base-layers",level:3},{value:"Example Code",id:"example-code",level:2},{value:"Advanced Example",id:"advanced-example",level:2}],y={toc:u};function m(e){var t=e.components,a=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,n.Z)({},y,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"layers"},"Layers"),(0,l.kt)("p",null,"Layers module adds keys for accessing other layers. It can simply be added to\nthe extensions list."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from kmk.modules.layers import Layers\nkeyboard.modules.append(Layers())\n")),(0,l.kt)("h2",{id:"keycodes"},"Keycodes"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"KC.DF(layer)")),(0,l.kt)("td",{parentName:"tr",align:null},"Switches the default layer until the next time the keyboard powers off")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"KC.MO(layer)")),(0,l.kt)("td",{parentName:"tr",align:null},"Momentarily activates layer, switches off when you let go")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"KC.LM(layer, mod)")),(0,l.kt)("td",{parentName:"tr",align:null},"As ",(0,l.kt)("inlineCode",{parentName:"td"},"MO(layer)")," but with ",(0,l.kt)("inlineCode",{parentName:"td"},"mod")," active")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"KC.LT(layer, kc)")),(0,l.kt)("td",{parentName:"tr",align:null},"Momentarily activates layer if held, sends kc if tapped")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"KC.TG(layer)")),(0,l.kt)("td",{parentName:"tr",align:null},"Toggles the layer (enables it if no active, and vise versa)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"KC.TO(layer)")),(0,l.kt)("td",{parentName:"tr",align:null},"Activates layer and deactivates all other layers")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"KC.TT(layer)")),(0,l.kt)("td",{parentName:"tr",align:null},"Momentarily activates layer if held, toggles it if tapped repeatedly")))),(0,l.kt)("h2",{id:"custom-holdtap-behavior"},"Custom HoldTap Behavior"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"KC.TT")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"KC.LT")," use the same heuristic to determine taps and holds as\nModTap. Check out the ",(0,l.kt)("a",{parentName:"p",href:"/docs/modtap"},"ModTap doc")," to find out more."),(0,l.kt)("h2",{id:"working-with-layers"},"Working with Layers"),(0,l.kt)("p",null,"When starting out, care should be taken when working with layers, since it's possible to lock\nyourself to a layer with no way of returning to the base layer short of unplugging your\nkeyboard. This is especially easy to do when using the ",(0,l.kt)("inlineCode",{parentName:"p"},"KC.TO()")," keycode, which deactivates\nall other layers in the stack."),(0,l.kt)("p",null,"Some helpful guidelines to keep in mind as you design your layers:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Only reference higher-numbered layers from a given layer"),(0,l.kt)("li",{parentName:"ul"},"Leave keys as ",(0,l.kt)("inlineCode",{parentName:"li"},"KC.TRNS")," in higher layers when they would overlap with a layer-switch")),(0,l.kt)("h3",{id:"using-multiple-base-layers"},"Using Multiple Base Layers"),(0,l.kt)("p",null,"In some cases, you may want to have more than one base layer (for instance you want to use\nboth QWERTY and Dvorak layouts, or you have a custom gamepad that can switch between\ndifferent games). In this case, best practice is to have these layers be the lowest, i.e.\ndefined first in your keymap. These layers are mutually-exclusive, so treat changing default\nlayers with ",(0,l.kt)("inlineCode",{parentName:"p"},"KC.DF()")," the same way that you would treat using ",(0,l.kt)("inlineCode",{parentName:"p"},"KC.TO()")),(0,l.kt)("h2",{id:"example-code"},"Example Code"),(0,l.kt)("p",null,"For our example, let's take a simple 3x3 macropad with two layers as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from kmk.modules.layers import Layers\nkeyboard.modules.append(Layers())\n\n# Layer Keys\nMOMENTARY = KC.MO(1)\nMOD_LAYER = KC.LM(1, KC.RCTL)\nLAYER_TAP = KC.LT(1, KC.END, prefer_hold=True, tap_interrupted=False, tap_time=250) # any tap longer than 250ms will be interpreted as a hold\n\nkeyboard.keymap = [\n    # Base layer\n    [\n        KC.NO,  KC.UP,  KC.NO,  \n        KC.LEFT,KC.DOWN,KC.RGHT,\n        MOMENTARY, LAYER_TAP, MOD_LAYER,\n    ],\n\n    # Function Layer\n    [\n        KC.F1,  KC.F2,  KC.F3,\n        KC.F4,  KC.F5,  KC.F6,\n        KC.TRNS,KC.TRNS,KC.TRNS,    \n    ],\n]\n")),(0,l.kt)("h2",{id:"advanced-example"},"Advanced Example"),(0,l.kt)("p",null,'A common question is: "How do I change RGB background based on my active layer?"\nHere is ',(0,l.kt)("em",{parentName:"p"},"one")," (simple) way of many to go about it."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"from kmk.modules.layers import Layers as _Layers\nfrom kmk.extensions.rgb import RGB\n\nrgb = RGB(...) # your RGB configuration goes here\nkeyboard.extensions.append(rgb)\n\nclass Layers(_Layers):\n    last_top_layer = 0\n    hues = (4, 20, 69)\n    \n    def after_hid_send(keyboard):\n        if keyboard.active_layers[0] != self.last_top_layer:\n            self.last_top_layer = keyboard.active_layers[0]\n            rgb.set_hsv_fill(self.hues[self.last_top_layer], 255, 255)\n\nkeyboard.modules.append(Layers())\n")))}m.isMDXComponent=!0}}]);