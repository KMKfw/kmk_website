"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[3326],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(t),m=o,k=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return t?r.createElement(k,a(a({ref:n},u),{},{components:t})):r.createElement(k,a({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2093:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],s={},c="Sequences",l={unversionedId:"sequences",id:"sequences",title:"Sequences",description:"Sequences are used for sending multiple keystrokes in a single action, and can",source:"@site/docs/sequences.md",sourceDirName:".",slug:"/sequences",permalink:"/kmk_website/docs/sequences",draft:!1,editUrl:"https://github.com/KMKfw/kmk_firmware/tree/master/docs/sequences.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Scanners",permalink:"/kmk_website/docs/scanners"},next:{title:"Split Keyboards",permalink:"/kmk_website/docs/split_keyboards"}},u={},d=[{value:"Sending strings",id:"sending-strings",level:2},{value:"Key sequences",id:"key-sequences",level:2},{value:"Unicode",id:"unicode",level:2},{value:"Unicode Modes:",id:"unicode-modes",level:3},{value:"Unicode Examples",id:"unicode-examples",level:3}],p={toc:d};function m(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"sequences"},"Sequences"),(0,i.kt)("p",null,"Sequences are used for sending multiple keystrokes in a single action, and can\nbe used for things like Unicode characters (even emojis! \ud83c\udde8\ud83c\udde6), ",(0,i.kt)("em",{parentName:"p"},"Lorem ipsum"),'\ngenerators, triggering side effects (think lighting, speakers,\nmicrocontroller-optimized cryptocurrency miners, whatever). If you are still\nunsure of what this is, most other vendors call these "Macros", but can do much\nmore if you wish.'),(0,i.kt)("h2",{id:"sending-strings"},"Sending strings"),(0,i.kt)("p",null,"The most basic sequence is ",(0,i.kt)("inlineCode",{parentName:"p"},"send_string"),'. It can be used to send any standard\nEnglish alphabet character, and an assortment of other "standard" keyboard keys\n(return, space, exclamation points, etc.)'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from kmk.handlers.sequences import send_string\n\nWOW = send_string("Wow, KMK is awesome!")\n\nkeyboard.keymap = [...WOW,...]\n')),(0,i.kt)("h2",{id:"key-sequences"},"Key sequences"),(0,i.kt)("p",null,"If you need to add modifier keys to your sequence, instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"send_string")," use\n",(0,i.kt)("inlineCode",{parentName:"p"},"simple_key_sequence"),". While it's not as visually clean as ",(0,i.kt)("inlineCode",{parentName:"p"},"send_string"),", you can\nuse it to add things like copying/pasting, tabbing between fields, etc."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from kmk.handlers.sequences import simple_key_sequence\n\nPASTE_WITH_COMMENTARY = simple_key_sequence(\n    (\n        KC.L,\n        KC.O,\n        KC.O,\n        KC.K,\n        KC.SPC,\n        KC.A,\n        KC.T,\n        KC.SPC,\n        KC.T,\n        KC.H,\n        KC.I,\n        KC.S,\n        KC.COLN,\n        KC.SPC,\n        KC.LCTL(KC.V),\n    )\n)\n\nkeyboard.keymap = [...PASTE_WITH_COMMENTARY,...]\n")),(0,i.kt)("p",null,'The above example will type out "look at this: " and then paste the contents of your\nclipboard.'),(0,i.kt)("h2",{id:"unicode"},"Unicode"),(0,i.kt)("p",null,"Before trying to send Unicode sequences, make sure you set your ",(0,i.kt)("inlineCode",{parentName:"p"},"UnicodeMode"),".\nYou can set an initial value in your keymap by setting ",(0,i.kt)("inlineCode",{parentName:"p"},"keyboard.unicode_mode"),"."),(0,i.kt)("p",null,"Keys are provided to change this mode at runtime - for example, ",(0,i.kt)("inlineCode",{parentName:"p"},"KC.UC_MODE_LINUX"),"."),(0,i.kt)("h3",{id:"unicode-modes"},"Unicode Modes:"),(0,i.kt)("p",null,"On Linux, Unicode uses ",(0,i.kt)("inlineCode",{parentName:"p"},"Ctrl-Shift-U"),", which is supported by ",(0,i.kt)("inlineCode",{parentName:"p"},"ibus")," and GTK+3.\n",(0,i.kt)("inlineCode",{parentName:"p"},"ibus")," users will need to add ",(0,i.kt)("inlineCode",{parentName:"p"},"IBUS_ENABLE_CTRL_SHIFT_U=1")," to their environment\n(",(0,i.kt)("inlineCode",{parentName:"p"},"~/profile"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.bashrc"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.zshrc"),", or through your desktop environment's\nconfigurator)."),(0,i.kt)("p",null,"On Windows, ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/samhocevar/wincompose"},"WinCompose")," is required."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Linux : ",(0,i.kt)("inlineCode",{parentName:"li"},"UnicodeMode.LINUX")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"UnicodeMode.IBUS")),(0,i.kt)("li",{parentName:"ul"},"Mac: ",(0,i.kt)("inlineCode",{parentName:"li"},"UnicodeMode.MACOS")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"UnicodeMode.OSX")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"UnicodeMode.RALT")),(0,i.kt)("li",{parentName:"ul"},"Windows: ",(0,i.kt)("inlineCode",{parentName:"li"},"UnicodeMode.WINC"))),(0,i.kt)("h3",{id:"unicode-examples"},"Unicode Examples"),(0,i.kt)("p",null,"To send a simple Unicode symbol"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from kmk.handlers.sequences import unicode_string_sequence\n\nFLIP = unicode_string_sequence('(\u30ce\u0ca0\u75ca\u0ca0)\u30ce\u5f61\u253b\u2501\u253b')\n\nkeyboard.keymap = [...FLIP,...]\n")),(0,i.kt)("p",null,"If you'd rather keep a lookup table of your sequences (perhaps to bind emojis to\nkeys), that's supported too, through an obnoxiously long-winded method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from kmk.handlers.sequences import compile_unicode_string_sequences as cuss\n\nemoticons = cuss({\n    'BEER': r'\ud83c\udf7a',\n    'HAND_WAVE': r'\ud83d\udc4b',\n})\n\nkeymap = [...emoticons.BEER, emoticons.HAND_WAVE...]\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The observant will notice dot-notation is supported here despite feeding in a\ndictionary - the return of ",(0,i.kt)("inlineCode",{parentName:"p"},"compile_unicode_string_sequences")," is a\n",(0,i.kt)("inlineCode",{parentName:"p"},"kmk.types.AttrDict"),", which you can think of as a read-only view over a\ndictionary adding attribute-based (dot-notation) access.")),(0,i.kt)("p",null,"Finally, if you need to send arbitrary Unicode codepoints in raw form, that's\nsupported too, through ",(0,i.kt)("inlineCode",{parentName:"p"},"unicode_codepoint_sequence"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from kmk.handlers.sequences import unicode_codepoint_sequence\n\nTABLE_FLIP = unicode_codepoint_sequence([\n    "28", "30ce", "ca0", "75ca","ca0", "29",\n    "30ce", "5f61", "253b", "2501", "253b",\n])\n\nkeyboard.keymap = [...TABLE_FLIP,...]\n')))}m.isMDXComponent=!0}}]);