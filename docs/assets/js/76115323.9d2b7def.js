"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[5593],{3905:(e,t,o)=>{o.d(t,{Zo:()=>d,kt:()=>m});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(o),b=n,m=u["".concat(s,".").concat(b)]||u[b]||p[b]||a;return o?r.createElement(m,i(i({ref:t},d),{},{components:o})):r.createElement(m,i({ref:t},d))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,i=new Array(a);i[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:n,i[1]=l;for(var c=2;c<a;c++)i[c]=o[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}b.displayName="MDXCreateElement"},3803:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=o(7462),n=(o(7294),o(3905));const a={},i="boot.py",l={unversionedId:"boot",id:"boot",title:"boot.py",description:"boot.py lives in the root of your keyboard when mounted as a storage device.",source:"@site/docs/boot.md",sourceDirName:".",slug:"/boot",permalink:"/docs/boot",draft:!1,editUrl:"https://github.com/KMKfw/kmk_firmware/tree/master/docs/boot.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BLE HID",permalink:"/docs/ble_hid"},next:{title:"CapsWord",permalink:"/docs/capsword"}},s={},c=[{value:"Hiding device storage",id:"hiding-device-storage",level:2},{value:"Using your keyboard before the OS loads",id:"using-your-keyboard-before-the-os-loads",level:2},{value:"Disabling serial communication",id:"disabling-serial-communication",level:2},{value:"Example code",id:"example-code",level:2}],d={toc:c},u="wrapper";function p(e){let{components:t,...o}=e;return(0,n.kt)(u,(0,r.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"bootpy"},"boot.py"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"boot.py")," lives in the root of your keyboard when mounted as a storage device.\nThere is a more detailed explanation in the ",(0,n.kt)("a",{parentName:"p",href:"https://docs.circuitpython.org/en/latest/README.html"},"circuit python docs"),",\nhowever there are some common use cases for your keyboard listed here."),(0,n.kt)("h2",{id:"hiding-device-storage"},"Hiding device storage"),(0,n.kt)("p",null,"You can hide your device from showing up as a USB storage by default (this can be overridden\nat startup if desired, per the example code further down this page)."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"storage.disable_usb_drive()\n")),(0,n.kt)("h2",{id:"using-your-keyboard-before-the-os-loads"},"Using your keyboard before the OS loads"),(0,n.kt)("p",null,"You can make your keyboard work in your computer's BIOS and bootloader (useful if you dual-boot)."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"usb_hid.enable(boot_device=1)\n")),(0,n.kt)("h2",{id:"disabling-serial-communication"},"Disabling serial communication"),(0,n.kt)("p",null,"By default, you can connect to your board's serial console, which can be useful for debugging,\nbut may not be desired for everyday use."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"# Equivalent to usb_cdc.enable(console=False, data=False)\nusb_cdc.disable()\n")),(0,n.kt)("h2",{id:"example-code"},"Example code"),(0,n.kt)("p",null,"Below is a fully working example, which disables USB storage, CDC and enables BIOS mode."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"import supervisor\nimport board\nimport digitalio\nimport storage\nimport usb_cdc\nimport usb_hid\n\nfrom kb import KMKKeyboard\nfrom kmk.scanners import DiodeOrientation\n\n\n# If this key is held during boot, don't run the code which hides the storage and disables serial\n# This will use the first row/col pin. Feel free to change it if you want it to be another pin\ncol = digitalio.DigitalInOut(KMKKeyboard.col_pins[0])\nrow = digitalio.DigitalInOut(KMKKeyboard.row_pins[0])\n\nif KMKKeyboard.diode_orientation == DiodeOrientation.COLUMNS:\n    col.switch_to_output(value=True)\n    row.switch_to_input(pull=digitalio.Pull.DOWN)\nelse:\n    col.switch_to_input(pull=digitalio.Pull.DOWN)\n    row.switch_to_output(value=True)\n\nif not row.value:\n    storage.disable_usb_drive()\n    # Equivalent to usb_cdc.enable(console=False, data=False)\n    usb_cdc.disable()\n    usb_hid.enable(boot_device=1)\n\nrow.deinit()\ncol.deinit()\n")))}p.isMDXComponent=!0}}]);